/* Copyright © Noé Perard-Gayot 2022. */

#pragma once

#include "CoreMinimal.h"
#include "Misc/Guid.h"
#include "WHAttributeName.generated.h"


/**
 *	A struct for representing an attribute (not it's value)
 *	It contains a human readable name (hopefully from Settings),
 *	and a unique ID, generated by settings;
 */
USTRUCT(BlueprintType)
struct WH_ATTRIBUTES_API FWHAttributeName
{
	GENERATED_BODY()

private:

	/**
	 *	Attribute Name for puny humans
	 *	(it's meant mostly for readability)
	 */
	FName Name;

	/**
	 *	Attribute Name for Chad machines
	 *	(it's meant for comparison and unicity)
	 */
	FGuid UniqueID;

public:

	// Various CTRs
	FWHAttributeName(); // BAD !
	FWHAttributeName(const FName& AttributeName); // GOOD
	FWHAttributeName(const FWHAttributeName& InAttribute); // COPY
	FWHAttributeName& operator=(const FWHAttributeName& Other); // ALSO COPY

	// ONLY CHECK UID
	FORCEINLINE bool operator==(const FWHAttributeName& Other) const {return UniqueID == Other.UniqueID;}

	// Friendly functions, yeah !
	FORCEINLINE friend uint32 GetTypeHash(const FWHAttributeName& Item)		{return GetTypeHash(Item.UniqueID);}
	friend FArchive& operator<<(FArchive& Ar, FWHAttributeName& AttrName) { AttrName.UniqueID.Serialize(Ar); return Ar;}

	explicit operator FName() const;

	FORCEINLINE bool IsValid() const {return Name != NAME_None && UniqueID != FGuid();}

	FORCEINLINE const FName& GetName() const {return Name;}
	FORCEINLINE const FGuid& GetID() const {return UniqueID;}
	FORCEINLINE FString IDString() const {return UniqueID.ToString();}

};
